// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(100)
  phone      String       @db.VarChar(20)
  email      String       @unique @db.VarChar(100)
  password   String
  firstLogin Boolean      @default(true)
  Customer   Customer[]
  Technician Technician[]
}

model Customer {
  id               Int             @id @default(autoincrement())
  userId           Int
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address          String?
  registrationDate DateTime        @default(now())
  supportTickets   SupportTicket[]
}

model Technician {
  id              Int                 @id @default(autoincrement())
  userId          Int
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  specialty       TechnicianSpecialty
  active          Boolean             @default(true)
  assignedTickets SupportTicket[]     @relation("AssignedTechnician")
}

model Supplier {
  id        Int        @id @default(autoincrement())
  name      String
  phone     String     @unique
  email     String?    @unique
  address   String?
  purchases Purchase[]
}

model Component {
  id            Int              @id @default(autoincrement())
  name          String           @unique
  description   String?
  visible       Boolean          @default(true)
  components    ComponentStock[]
  Purchase      Purchase[]
  UsedComponent UsedComponent[]
}

model ComponentStock {
  id           Int             @id @default(autoincrement())
  componentId  Int
  component    Component       @relation(fields: [componentId], references: [id])
  stock        Int             @default(0)
  minimumStock Int             @default(5)
  unitPrice    Float
  inUse        Boolean
  usedIn       UsedComponent[]
}

model SupportedDevices {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  SupportTicket SupportTicket[]
}

model SupportTicket {
  id                   Int              @id @default(autoincrement())
  customerId           Int
  customer             Customer         @relation(fields: [customerId], references: [id])
  assignedTechnicianId Int?
  assignedTechnician   Technician?      @relation("AssignedTechnician", fields: [assignedTechnicianId], references: [id])
  supportedDevicesId   Int
  supportedDevices     SupportedDevices @relation(fields: [supportedDevicesId], references: [id])
  brand                String
  problemDescription   String
  status               TicketStatus     @default(pending)
  priority             TicketPriority   @default(medium)
  model                String?
  serialNumber         String?
  requestDate          DateTime         @default(now())
  closeDate            DateTime?
  repairs              Repair[]
}

model Repair {
  id              Int             @id @default(autoincrement())
  supportTicketId Int
  supportTicket   SupportTicket   @relation(fields: [supportTicketId], references: [id])
  diagnosis       String
  startDate       DateTime
  appliedSolution String?
  endDate         DateTime?
  estimatedCost   Float?
  usedComponents  UsedComponent[]
}

model Purchase {
  id           Int            @id @default(autoincrement())
  supplierId   Int
  supplier     Supplier       @relation(fields: [supplierId], references: [id])
  componentId  Int
  component    Component      @relation(fields: [componentId], references: [id])
  quantity     Int
  unitPrice    Float
  purchaseDate DateTime
  deliveryDate DateTime?
  details      String?
  status       PurchaseStatus @default(pending)
}

model UsedComponent {
  id               Int             @id @default(autoincrement())
  repairId         Int
  repair           Repair          @relation(fields: [repairId], references: [id])
  componentId      Int
  component        Component       @relation(fields: [componentId], references: [id])
  quantity         Int             @default(1)
  componentStockId Int?
  ComponentStock   ComponentStock? @relation(fields: [componentStockId], references: [id])
}

enum TechnicianSpecialty {
  hardware
  software
  general
}

enum TicketStatus {
  pending
  in_progress
  completed
  canceled
}

enum TicketPriority {
  low
  medium
  high
}

enum PurchaseStatus {
  pending
  completed
  canceled
  returned
}
